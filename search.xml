<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[EventBus消息机制简单使用]]></title>
    <url>%2Fdaixuenan.github.io%2F2018%2F11%2F08%2Fdevelop%2Fdailyshare%2Feventbus%2F</url>
    <content type="text"><![CDATA[原创地址 https://13811914041.github.io/daixuenan.github.io/百度解释：EventBus可以代替Android传统的Intent,Handler,Broadcast或接口函数,在Fragment,Activity,Service线程之间传递数据，执行方法。是一个Android事件发布/订阅轻量级框架。 简单点说,就是可以在Android内部各个线程间通信,所以有了它,原先的Broadcast就可以淘汰了。Broadcast就不说了,用过的不舒服,没用过的也别接触了,直接EventBus就好了。 集成EventBus集成很简单,有依赖包。在项目的gradle里面添加下面的代码,编译即可1implementation 'org.greenrobot:eventbus:3.0.0' 简单使用EventBusEventBus的使用简单来说就是两步：1、注册；2、发送。和Broadcast一样。 首先，在Activity的onCreate或者在Fragment的onCreateView里面添加下面代码： 12345@Overrideprotected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); EventBus.getDefault().register(this);&#125; 注意，要在super.onCreate(savedInstanceState)之后。 然后，要在onDestory方法注销 12345@Overrideprotected void onDestroy() &#123; super.onDestroy(); EventBus.getDefault().unregister(this);&#125; 接下来，配置接收回调即可。 1234@Subscribe(threadMode = ThreadMode.MAIN)public void event(String msg) &#123; //TODO:处理msg&#125; event是方法名，可以自定义。如果只配置register和unregister方法，不配置Subscribe，会崩溃。 如果要发送消息，可调用 1EventBus.getDefault().post("发送EventBus消息"); 到这里，EventBus就完成了发送、接收。 这里注意一下，EventBus的post方法和接收方法的参数是Object，所以除了String，还可以发送其他的实体类，可以基于此再次封装。比如： MsgBean.java 123456789101112131415161718192021222324252627public class MsgBean implements Serializable &#123; private String title; private String content; public MsgBean(String title, String content) &#123; this.title = title; this.content = content; &#125; public String getTitle() &#123; return title; &#125; public void setTitle(String title) &#123; this.title = title; &#125; public String getContent() &#123; return content; &#125; public void setContent(String content) &#123; this.content = content; &#125;&#125; MainActivity.java 1234567891011121314151617181920212223242526272829303132333435public class MainActivity extends Activity &#123; @BindView(R.id.btn) Button btn; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ButterKnife.bind(this); EventBus.getDefault().register(this); &#125; @OnClick(R.id.btn) public void onViewClicked() &#123; EventBus.getDefault().post(new MsgBean("标题", "内容")); EventBus.getDefault().post("msg"); &#125; @Subscribe(threadMode = ThreadMode.MAIN) public void event(String mgs) &#123; btn.append("\nmgs"); &#125; @Subscribe(threadMode = ThreadMode.MAIN) public void event2(MsgBean msgBean) &#123; btn.append("\n" + msgBean.getTitle() + "\n" + msgBean.getContent()); &#125; @Override protected void onDestroy() &#123; super.onDestroy(); EventBus.getDefault().unregister(this); &#125;&#125; 原创地址 https://13811914041.github.io/daixuenan.github.io/]]></content>
      <categories>
        <category>Android开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ButterKnife插件集成及使用]]></title>
    <url>%2Fdaixuenan.github.io%2F2018%2F11%2F07%2Fdevelop%2Fdailyshare%2Fbutterknife%2F</url>
    <content type="text"><![CDATA[原创地址 https://13811914041.github.io/daixuenan.github.io/我们Android日常开发，经常用到控件，而且在用控件之前，要先获取控件id，再进行操作。看下以前的某位同事的代码： 定义控件 1private TextView textView; 获取控件 1textView = (TextView)findViewById(R.id.textView); 这样的代码复制粘贴多了，是挺烦的。而且还经常遇见空指针异常。比如看下面这个Activity： MainActivity.java 1234567891011121314151617public class MainActivity extends AppCompatActivity &#123; private TextView tvText; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); String str = "解决冲突";// tvText = findViewById(R.id.tv_text); // 文本 tvText.setText(getString(R.string.this_is_a_text)); &#125;&#125; 1234E/AndroidRuntime: FATAL EXCEPTION: main Process: com.example.dai.myapplication, PID: 9642 java.lang.RuntimeException: Unable to start activity ComponentInfo&#123;com.example.dai.myapplication/com.example.dai.myapplication.MainActivity&#125;: java.lang.NullPointerException: Attempt to invoke virtual method 'void android.widget.TextView.setText(java.lang.CharSequence)' on a null object reference 注意看 1void android.widget.TextView.setText(java.lang.CharSequence)' on a null object reference 是没有获取到TextView，也就是没有写下面这一句：1tvText = findViewById(R.id.tv_text); 当ID很多时这个情况确实是容易被忽略掉的。 那就进入正题，看看ButterKnife吧。 先看一下用了ButterKnife的代码是什么样的： MainActivity.java1234567891011121314151617181920212223242526272829303132333435public class MainActivity extends AppCompatActivity &#123; @BindView(R.id.tv_text) TextView tvText; @BindView(R.id.tv_text2) TextView tvText2; @BindView(R.id.tv_text3) TextView tvText3; @BindView(R.id.tv_text4) TextView tvText4; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ButterKnife.bind(this); // 文本 tvText.setText(getString(R.string.this_is_a_text)); &#125; @OnClick(&#123;R.id.tv_text, R.id.tv_text2, R.id.tv_text3, R.id.tv_text4&#125;) public void onViewClicked(View view) &#123; switch (view.getId()) &#123; case R.id.tv_text: break; case R.id.tv_text2: break; case R.id.tv_text3: break; case R.id.tv_text4: break; &#125; &#125;&#125; 十分整洁。常用的控件获取和点击事件都不需要写代码，可以根据插件自动生成。接下来开始集成。 ButterKnife插件插件不同于library库，它是作用在Android Studio上的，类似快捷键的一种。File-&gt;Settings-&gt;Plugins-&gt;Browse repositories，搜索框输入butterknife，会出来很多选项，我们选Android ButterKnife Zelezny，也就是评分最高的那一项。如下图： 如果未安装插件，右侧会有Install按钮。点击Install按钮后，等待安装成功，重启Android Studio即可使用插件。 找到layout布局右键-&gt;Generate-&gt;Generate ButterKnife Injections，如下图勾选选项，最后点击confirm确认。 结果如下图显示。 12345678910111213141516171819public class MainActivity extends Activity &#123; @BindView(R.id.btn) Button btn; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ButterKnife.bind(this); //btn.setText("我是按钮"); &#125; @OnClick(R.id.btn) public void onViewClicked() &#123; &#125;&#125; 获取的btn可以直接使用。 原创地址 https://13811914041.github.io/daixuenan.github.io/]]></content>
      <categories>
        <category>Android开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[摘要]]></title>
    <url>%2Fdaixuenan.github.io%2F2018%2F08%2F15%2Fcamera%2Fbegin%2Fabstract%2F</url>
    <content type="text"><![CDATA[原创地址 https://13811914041.github.io/daixuenan.github.io/开始接触摄影了，从小白开始学习，过两天就会入手一个微单，开始作死之旅。期间会记录分享自己学到的知识，以及自己的作品。兵马未动粮草先行，相机未到手，但是士气已经高涨，给自己加油。 原创地址 https://13811914041.github.io/daixuenan.github.io/]]></content>
      <categories>
        <category>摄影之旅</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[真机调试]]></title>
    <url>%2Fdaixuenan.github.io%2F2018%2F08%2F14%2Fdevelop%2Fbeign%2Fphone_debug%2F</url>
    <content type="text"><![CDATA[原创地址 https://13811914041.github.io/daixuenan.github.io/真机调试通常把手机插上数据线，连接到电脑上，点击debug调试，弹出框就会显示设备，选择设备即可安装安卓软件。在这里，我假设是新手机第一次调试。这样的话我们需要进行以下几个步骤： * 激活开发者模式* 打开USB调试* 连接调试设备激活开发者模式以我的手机，小米MIX2为例。现在的新手机通常刚到手是看不见开发者选项的，需要去激活开发者选项。激活流程为设置-&gt;我的设备-&gt;全部参数，然后一直连点 MIUI 版本处直到打开开发者模式为止。然后设置-&gt;更多设置，开发者选项就出现了。不同的手机激活位置不一样，大体思路都是进入手机信息，尝试连点各个版本信息往往就可以找到激活开发者选项的地方。如下图： 打开USB调试打开开发者选项，打开USB调试选项，一些手机还需要打开USB安装选项（如果有的话就需要打开，且需要安装sim卡才可以打开） 连接调试设备打开项目，点击debug调试按钮 选择调试设备，点击OK 手机安装成功 到这里，就可以修改代码，调试项目了。 原创地址 https://13811914041.github.io/daixuenan.github.io/]]></content>
      <categories>
        <category>Android开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[模拟器调试]]></title>
    <url>%2Fdaixuenan.github.io%2F2018%2F08%2F14%2Fdevelop%2Fbeign%2Fvirtual_debug%2F</url>
    <content type="text"><![CDATA[原创链接 https://13811914041.github.io/daixuenan.github.io/2018/08/13/beign/virtual_debug/通常调试Android代码的时候，我们一般习惯用真机调试，因为真机功能全，而且速度相对快一些。但是有时候没有真机的环境下，就需要模拟器来调试代码。Android Studio有自带的虚拟机，可根据自己需求的选择API版本。除了安卓自带的模拟器，还有第三方模拟器，功能强大且性能优秀，如逍遥模拟器、夜神模拟器、腾讯的模拟器。第三方的模拟器主要是用来玩的，由于其性能的优越性，拿来调试项目也是不错的选择。 在这里，我只重点介绍第三方模拟器调试。因为第三方模拟器搭建起来比较方便，速度快；Android Studio自带的模拟器还是很慢的，不太适合实际开发调试。下面以逍遥模拟器为例：逍遥模拟器调试逍遥模拟器下载下载安装方法不多做介绍，和普通软件安装流程一样。注意选择个人版即可。下载完成后双击图标打开模拟器，第一次打开需要初始化，比较慢。 里面会推荐很多游戏，要禁得住诱惑。 此时已经可以调试了。打开项目，点击debug调试按钮 选择调试的设备，点击OK即可开始安装，需等待，可依据底部状态条状态。如果没有设备，将模拟器关掉重新打开即可。 至此，就可以修改代码调试APP了。 安卓自带模拟器调试如下图： 然后点击Create Virtual Device，选择设备类型及型号（默认即可），next， 选择模拟器API版本，可选择一个点击download，等待下载安装完成后选中并点击next。我下载的是API 25，7.1.1版本。 输入虚拟机名称，选择横竖屏。通常手机是竖屏，平板是横屏。一般情况我们选默认的竖屏就好。点击finish即可完成虚拟机创建。 点击启动按钮开启虚拟机，等待虚拟机启动成功后，即可调试。（这个虚拟机我没有成功打开） 原创地址 https://13811914041.github.io/daixuenan.github.io/]]></content>
      <categories>
        <category>Android开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[开启安卓之旅]]></title>
    <url>%2Fdaixuenan.github.io%2F2018%2F08%2F14%2Fdevelop%2Fstart%2Fstart_android%2F</url>
    <content type="text"><![CDATA[原创地址 https://13811914041.github.io/daixuenan.github.io/下面我们可以开始安卓开发了，不过在开始之前，我觉得有必要介绍一下安卓project的目录结构，让大家认清各个文件类型的作用，在写代码之前对安卓有个大体的了解。 安卓目录可以有多种表现形式，如下图： 常用的有project和android两种视图，project目录结构将项目所有文件都展示出来；Android目录结构是安卓项目特有的结构，只展示可编辑的项目文件目录。本人比较习惯Android目录结构，因为简洁，找文件方便。我也推荐使用Android目录结构，包括接下来的目录结构介绍也是根据Android结构来。project目录结构也可一一对应。 如上图所示，我们能看见app目录，app下有mainifest、java、res文件夹。library目录，下面还有Gradle Scripts及下面一群文件。library是moudle依赖库，结构与app基本一样，不过不适合现在就说，在后面会写。 app项目主目录。主要的业务逻辑都会在这里实现。 Gradle Scripts这个不是一个目录，而是Android目录结构将配置文件都提取出来统一放在这一层管理，这也是我喜欢Android视图结构的原因之一。 mainifest这个目录下有一个AndroidMainifest.xml文件，主要用来配置权限和一些Activity(可以理解为页面)，Service(应用后台服务)，以及一些其他应用的信息。 java这个目录存放需要实现的业务逻辑的代码 res这个是资源文件夹，里面存放项目的资源文件。 drawable 和 mipmap图片资源文件，目前我比较习惯drawable为主。二选一即可。 layout静态布局文件。Android的页面往往都是先实现layout文件下面的.xml静态布局文件，然后用java代码来控制布局文件的属性，以达到各式各样的交互效果。通常我们用Activity、Fragment来控制，有时候我们也会自定义控件、布局、对话框之类，可以调用静态布局文件。 valuesvalues文件夹下存放的都是一些设置好的值或者样式。colors里面可以设置颜色属性；strings可以配置可供全局使用的字符串；styles可以设置各种样式，包括主题风格到具体控件样式。 除此之外还有其他一些不可见的文件。attrs用来定义各控件布局的属性，且支持在静态layout布局配置；dimens定义全局的数值，包括长宽高、文字的大小；arrays顾名思义数组，将各类值归纳到一个数组中供全局调用。 以上文件均各自实现各自名称相应的功能，不过我也可以在strings.xml添加colors的全局配置，虽然有各自的名字，但是使用是很灵活的。不过我们一般统一规范，该在哪里写就在哪里写，这也是必须严格注意的。 build.gradle这个是项目的主要配置文件。一般新建的项目会有两个build.gradle文件，看后面的()内容，Project开头的是项目的全局配置文件，Module开头的是各自模块（module）的配置文件。如果后面添加了很多module依赖，则会出现相应的build.gradle配置文件。()内冒号后面是该Project/Module的名字。 以下是不需要关注太多的，知道就行gradle-wrapper.properties项目gradle的配置文件。通常Android Studio会自动配置好。除非出了问题，才需要处理。 proguard-rules.pro配置项目的混淆代码。目前有免费的线上加固包，挺方便的。 gradle.properties配置静态变量以供build.gradle调用。 local.properties通常自动生成，不用管。配置静态变量以供java代码调用。这里一般会有SDK路径配置，有NDK的话还会有NDK路径配置。 local.properties依赖的modules，自动生成，不用管。 另外还有一些其他目录libsapp目录同级目录。这个文件夹需要切换到project目录结构才能看见，里面存放库文件。若有.so库，则会有相对应的jniLibs文件生成（需要一些配置）。一般本地.jar包、本地.so文件、.arr包在这里添加。 assetsapp目录同级目录。也是存放资源文件为主，与res的区别是这里存放一些特殊的文件及一些较大文件。如txt文本、本地音视频等。较大的图片也可以存放在这里。 animres目录下的子目录。通常存放一些动画属性。 menures目录下的子目录。菜单的配置。较少用。通常都是自行在代码中实现。 关于这些目录结构下的文件的配置用法，后面会根据实例写到。接下来，就可以写代码了。原创地址 https://13811914041.github.io/daixuenan.github.io/]]></content>
      <categories>
        <category>Android开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[TextView文本控件的使用]]></title>
    <url>%2Fdaixuenan.github.io%2F2018%2F08%2F14%2Fdevelop%2Fwidget%2Ftextview%2F</url>
    <content type="text"><![CDATA[原创地址 https://13811914041.github.io/daixuenan.github.io/TextView是安卓开发常用的控件，其作用是展示文本内容。可以根据需求，展示丰富的视觉效果。首先，打开Android Studio，找到activity_main.xml文件并双击打开。 可以看到，新创建的项目里，已经在activity_main.xml里面已经写了TextView。 activity_main.xml1234567&lt;TextView android:id="@+id/tv_text" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="我是一个文本" android:textColor="#00ff00" android:textSize="24sp" /&gt; 通过上段代码，就可以编辑出一个有文本内容，有id，宽高，颜色，文字大小设置好的TextView。运行，即可看见效果。 id通常我们为一个控件设置id,可以在上下文引用。同时在java代码中我们也通过id来获取一个控件设置它的属性。 layout_width layout_height控件的宽高。通常我们会用wrap_content、match_parent、fill_parent以及dp单位的数值设置它的属性，dp单位的数值比如30dp这样表示。wrap_content是自适应，match_parent和fill_parent是填充，但还是有有区别的，这个后面再说。 text虽然只是个文本属性，但还是要说的。通常规范写法不会直接将文本写在这里，而是将文本配置到res-&gt;values-&gt;strings.xml中引用。 strings.xml1&lt;string name="this_is_a_text"&gt;这是一个文本&lt;/string&gt; 在resources标签内依照格式添加上面的代码。name命名小写，单词以下划线相连。 TextView属性设置1android:text="@string/this_is_a_text" textColor文本颜色也需要配置好以后再引用，位置在res-&gt;values-&gt;colors.xml。 colors.xml1&lt;color name="text_color"&gt;#999999&lt;/color&gt; TextView属性设置1android:textColor="@color/text_color" textSize文字大小我们通常用sp单位，与dp单位的区别是，sp单位的文字大小可根据系统设置改变。文字大小属性包括一些常用的dp单位值一般都存在dimens.xml文件里。 找到values文件夹，右键-&gt;new-&gt;XML-&gt;Values XML File，在弹出框输入dimens，.xml后缀会自动生成。 dimens.xml123&lt;resources&gt; &lt;dimen name="text_size_15"&gt;15sp&lt;/dimen&gt;&lt;/resources&gt; TextView属性设置1android:textSize="@dimen/text_size_15" 在activity_main.xml设置了属性以后，我们可以在MainActivity中操作这个控件。MainActivity.java123456789101112131415161718192021222324252627public class MainActivity extends AppCompatActivity &#123; private TextView tvText; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); tvText = findViewById(R.id.tv_text); // 文本 tvText.setText(getString(R.string.this_is_a_text)); //颜色 tvText.setTextColor(getResources().getColor(R.color.text_color)); //点击事件 tvText.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; //提示框 Toast.makeText(MainActivity.this, "点击事件", Toast.LENGTH_SHORT).show(); &#125; &#125;); &#125;&#125; 这些都是基本属性，看起来也不是很多。其实TextView的属性是很多的，在这里我就偷点赖。其他的属性为什么没介绍，是因为这些首先是有API的，另外网上都能搜到，需要用什么搜一搜就能搜到了。如果有时间的话，我可以考虑再整理一遍。]]></content>
      <categories>
        <category>Android开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[版本控制环境搭建]]></title>
    <url>%2Fdaixuenan.github.io%2F2018%2F08%2F14%2Fdevelop%2Fstart%2Fstart_version_control%2F</url>
    <content type="text"><![CDATA[原创地址 https://13811914041.github.io/daixuenan.github.io/日常工作我们通常会将写好的代码上传到服务器，这时候就需要版本控制工具。一般我们常用的版本控制工具是git和svn，在这里我说下最常用的Git的环境搭建。 Gitgit下载 安装Git下载git然后安装，一路next，全部默认即可。安装git后，在文件夹内右键就可以看见多出了git的功能。选择Git Bash Here，进入git命令窗口。安装流程很简单。 接下来打开Android Studio，Settings-&gt;Version Control-&gt;Git，在Path to Git executable一栏配置git安装路径，添加Git安装目录下的cmd/git.exe文件即可，添加成功后可点击Test按钮测试，成功提示如下图： 接下来不是立马使用git，而是要先配置SSH。Git仓库平台常用的有Github，码云，GitLab等，而且一般在设置页面都会有相应的教程。 配置SSH找个文件夹，鼠标空白处右键，Git Bash Here。 生成 sshkey:12345ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot; # xxxxx@xxxxx.com是平台注册的邮箱# Generating public/private rsa key pair...# 三次回车即可生成 ssh key 查看你的 public key1cat ~/.ssh/id_rsa.pub 然后复制key配置到对应的平台上，包括开头ssh-rsa和结尾邮箱内容。 Android Studio Git操作首先，我们拉取Git项目。如下图： 点击Check out project from Version Control，选择Git Url可以暂时先用我这个git@github.com:13811914041/MyApplication.git，或者自己有的话也可以用自己的。第二个是项目存放路径，需要自己选；最后一个是项目名称，通常是默认用Git仓库的文件夹名称，也可以自己编辑。 Gradle版本，选择默认的第一个，接下来全部一路next，直到完成，然后再等待编译成功即可。 代码拉下来，编译好之后，就可以编辑代码了。编辑完代码可以在Android Studio内部通过版本控制提交和拉取代码。 Android Studio页面右上角控制面板有版本控制上传、下拉的快捷键(不同版本的Android Studio图标可能有差异，不过位置是固定在这个位置的，比较好找)，如下图： 左边的按钮是拉取最新代码，通常默认即可 右边的按钮是上传代码 红色的文件是没有加入到版本控制的，如果想加入到版本控制，可右键-&gt;Add to VCS。提交的时候Commit Message通常需要填写更新内容，否则无法提交成功。提交点击Commit即可，或者点击下拉箭头直接选择Commit and Push，可直接提交并推送到远程分支。 若没有选择Commit and Push，可自行再次push。顶部VCS-&gt;Git-&gt;push，点击下方push即可。如下图： 点击push按钮，提交成功就可以了。 如果有冲突的话，会弹出提示框，如下图： 点击Merge，有时会Git会自动解决一些简单的冲突，但是通常冲突还是需要自己解决的。如下图： 中间就是冲突文件列表，右侧按钮顾名思义：Accept Yours，选中文件使用自己的版本；Accept Theirs，选中的文件使用远程的版本；Merge，手动解决冲突。根据需求，自行取舍即可。前面两个按钮没什么可说的，如果手动解决冲突的话，有必要说一下。选中文件点击Merge按钮，弹出如下图所示页面： 视图有三个框，左边是本地的文件，右边是远程的文件，中间是本地上次更新的文件。将两个版本的冲突合并到中间文件即可完成解决冲突的操作。 提示：箭头处红色的是某同一个位置代码冲突部分，绿色部分是新增的内容。 操作：X是放弃导入代码；&gt;&gt;是导入代码。根据实际情况具体选择。 解决冲突出现如下提示，即完成冲突解决工作： 此时可点击Apply，提交文件。 底部有个Git:master，master是当前分支，通常我们也将master作为主分支，New Branch的功能是新建一个分支；Local Branches是本地的分支，Remote Branches是远程分支，即Git仓库分支，分之间可以相互切换，当然，要注意切换之前要处理好冲突。 搭好Git环境后，就可以方便的用Android Studio内部的功能操作Git了，不需要时刻敲指令。 原创地址 https://13811914041.github.io/daixuenan.github.io/]]></content>
      <categories>
        <category>Android开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[摘要]]></title>
    <url>%2Fdaixuenan.github.io%2F2018%2F08%2F13%2Fdevelop%2Fbeign%2Fabstract%2F</url>
    <content type="text"><![CDATA[原创地址 https://13811914041.github.io/daixuenan.github.io/安卓开发工作也已经几年了，期间想过要建立一个自己的blog，只是一直不知道该写什么。现在想想，既然不知道写什么，那就把自己这些年的积累写下来吧，以梳理过的结构，回顾一下自己从零开始学习安卓至今的历程。想学安卓的小伙伴们也欢迎来这边交流，也欢迎老司机及时指出不正之处。 原创地址 https://13811914041.github.io/daixuenan.github.io/]]></content>
      <categories>
        <category>Android开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JDK安装（Windows）]]></title>
    <url>%2Fdaixuenan.github.io%2F2018%2F08%2F13%2Fdevelop%2Fbeign%2Fjdk_install%2F</url>
    <content type="text"><![CDATA[原创地址 https://13811914041.github.io/daixuenan.github.io/JDK安装下载的JDK安装包包含jdk和jre两个安装包（我们主要需要jdk，jre算是附带品，开发基本不会用到），所以，我们安装的时候一般建立一个java目录，在java目录下建立jdk和jre两个子目录，分别存放jdk和jre安装文件。如下图： 双击打开安装步骤，注意选择jdk文件夹，如下图： 安装完jdk就是jre,与jdk一样的步骤。找到jdk安装目录复制bin目录路径，并复制到粘贴板上(CTRL + C)，如下图： 安装完成后找到我的电脑图标右键-&gt;属性-&gt;高级系统设置-&gt;环境变量，结果如下图： 双击系统变量下的Path，接下来win7 win8 win10系统界面不太一样，我是win10系统，不一样的页面在弹出框后面加上‘;’，再粘贴复制的路径(CTRL + V)，win10页面如下图： 在空处粘贴即可。 至此，JDK就安装完成了。可以检测一下JDK环境配置。win + R，弹出框输入cmd打开dos窗口，分别输入java -version、javac -version，查看版本号成功，即环境搭建成功，如下图： 原创地址 https://13811914041.github.io/daixuenan.github.io/]]></content>
      <categories>
        <category>Android开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[安卓环境搭建（Windows）]]></title>
    <url>%2Fdaixuenan.github.io%2F2018%2F08%2F13%2Fdevelop%2Fbeign%2Fenvironment%2F</url>
    <content type="text"><![CDATA[原创地址 https://13811914041.github.io/daixuenan.github.io/JDK下载没有JDK环境的话需要下载安装。注意勾选接受条款，并选择对应的版本，我机器是windows 64位。如下图： Android SDK下载Android SDK在安装Android Studio时会提示安装，但是我比较习惯全部自己来，也是受到当初ecplise的安装习惯影响。 Android Studio下载Android Studio是目前主要的安卓开发软件，ecplise我也已经很少用了。JDK和Android SDK在Android Studio安装的时候会提示自动安装，但是我觉得不太好管理，所以全部手动安装了。 以上软件基本都是下载最新版。如下图： 然后，开始搭建环境JDK安装Android SDK和Android Studio安装没什么好说的，一路安装即可。安装完成后打开Android Studio，如下图： 如果SDK没有设置成功，可通过config-&gt;SDK，点击edit配置SDK路径，如下图： 至此，安装工作完成，接下来可以创建hello world了，比较简单。如下图：点击Start a new Android Studio project 按照提示输入项目名称、域名，选择项目目录 选择手机平板开发即可，点击next 选择Empty Activity，点击next 点击finish,即可完成一个项目的创建 项目创建成功 接下来就可以运行项目在手机上了 原创地址 https://13811914041.github.io/daixuenan.github.io/]]></content>
      <categories>
        <category>Android开发</category>
      </categories>
  </entry>
</search>
