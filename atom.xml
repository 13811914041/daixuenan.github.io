<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云古的博客</title>
  
  <subtitle>云古的博客</subtitle>
  <link href="/daixuenan.github.io/atom.xml" rel="self"/>
  
  <link href="https://13811914041.github.io/daixuenan.github.io/"/>
  <updated>2018-11-09T05:32:07.038Z</updated>
  <id>https://13811914041.github.io/daixuenan.github.io/</id>
  
  <author>
    <name>云古</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EventBus消息机制简单使用</title>
    <link href="https://13811914041.github.io/daixuenan.github.io/2018/11/08/develop/dailyshare/eventbus/"/>
    <id>https://13811914041.github.io/daixuenan.github.io/2018/11/08/develop/dailyshare/eventbus/</id>
    <published>2018-11-07T16:00:00.000Z</published>
    <updated>2018-11-09T05:32:07.038Z</updated>
    
    <content type="html"><![CDATA[<h6 id="原创地址-https-13811914041-github-io-daixuenan-github-io"><a href="#原创地址-https-13811914041-github-io-daixuenan-github-io" class="headerlink" title="原创地址 https://13811914041.github.io/daixuenan.github.io/"></a>原创地址 <a href="https://13811914041.github.io/daixuenan.github.io/">https://13811914041.github.io/daixuenan.github.io/</a></h6><p>百度解释：EventBus可以代替Android传统的Intent,Handler,Broadcast或接口函数,在Fragment,Activity,Service线程之间传递数据，执行方法。是一个Android事件发布/订阅轻量级框架。</p><p>简单点说,就是可以在Android内部各个线程间通信,所以有了它,原先的Broadcast就可以淘汰了。Broadcast就不说了,用过的不舒服,没用过的也别接触了,直接EventBus就好了。</p><h3 id="集成EventBus"><a href="#集成EventBus" class="headerlink" title="集成EventBus"></a>集成EventBus</h3><p>集成很简单,有依赖包。在项目的gradle里面添加下面的代码,编译即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'org.greenrobot:eventbus:3.0.0'</span></span><br></pre></td></tr></table></figure></p><h3 id="简单使用EventBus"><a href="#简单使用EventBus" class="headerlink" title="简单使用EventBus"></a>简单使用EventBus</h3><p>EventBus的使用简单来说就是两步：1、注册；2、发送。和Broadcast一样。</p><p>首先，在Activity的onCreate或者在Fragment的onCreateView里面添加下面代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    EventBus.getDefault().register(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，要在super.onCreate(savedInstanceState)之后。</p><p>然后，要在onDestory方法注销</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void <span class="function"><span class="title">onDestroy</span></span>() &#123;</span><br><span class="line">    super.onDestroy();</span><br><span class="line">    EventBus.getDefault().unregister(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，配置接收回调即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Subscribe(threadMode = ThreadMode.MAIN)</span><br><span class="line">public void event(String msg) &#123;</span><br><span class="line">    //TODO:处理msg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>event是方法名，可以自定义。</p><p>定义控件</p><p>获取控件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textView = (TextView)findViewById(R.id.textView);</span><br></pre></td></tr></table></figure></p><p>这样的代码复制粘贴多了，是挺烦的。而且还经常遇见空指针异常。比如看下面这个Activity：</p><p>MainActivity.java<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private TextView tvText;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"解决冲突"</span>;</span><br><span class="line"></span><br><span class="line">//        tvText = findViewById(R.id.tv_text);</span><br><span class="line"></span><br><span class="line">        // 文本</span><br><span class="line">        tvText.setText(getString(R.string.this_is_a_text));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E/AndroidRuntime: FATAL EXCEPTION: main</span><br><span class="line">                  Process: com.example.dai.myapplication, PID: 9642</span><br><span class="line">                  java.lang.RuntimeException: Unable to start activity ComponentInfo&#123;com.example.dai.myapplication/com.example.dai.myapplication.MainActivity&#125;: </span><br><span class="line">                  java.lang.NullPointerException: Attempt to invoke virtual method <span class="string">'void android.widget.TextView.setText(java.lang.CharSequence)'</span> on a null object reference</span><br></pre></td></tr></table></figure><p>注意看<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void android.widget.TextView.setText(java.lang.CharSequence)<span class="string">' on a null object reference</span></span><br></pre></td></tr></table></figure></p><p>是没有获取到TextView，也就是没有写下面这一句：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tvText = findViewById(R.id.tv_text);</span><br></pre></td></tr></table></figure></p><p>当ID很多时这个情况确实是容易被忽略掉的。</p><p>那就进入正题，看看ButterKnife吧。</p><p>先看一下用了ButterKnife的代码是什么样的：</p><p>MainActivity.java<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @BindView(R.id.tv_text)</span><br><span class="line">    TextView tvText;</span><br><span class="line">    @BindView(R.id.tv_text2)</span><br><span class="line">    TextView tvText2;</span><br><span class="line">    @BindView(R.id.tv_text3)</span><br><span class="line">    TextView tvText3;</span><br><span class="line">    @BindView(R.id.tv_text4)</span><br><span class="line">    TextView tvText4;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ButterKnife.bind(this);</span><br><span class="line"></span><br><span class="line">        // 文本</span><br><span class="line">        tvText.setText(getString(R.string.this_is_a_text));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @OnClick(&#123;R.id.tv_text, R.id.tv_text2, R.id.tv_text3, R.id.tv_text4&#125;)</span><br><span class="line">    public void onViewClicked(View view) &#123;</span><br><span class="line">        switch (view.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.tv_text:</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.tv_text2:</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.tv_text3:</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.tv_text4:</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>十分整洁。常用的控件获取和点击事件都不需要写代码，可以根据插件自动生成。接下来开始集成。</p><h3 id="ButterKnife插件"><a href="#ButterKnife插件" class="headerlink" title="ButterKnife插件"></a>ButterKnife插件</h3><p>插件不同于library库，它是作用在Android Studio上的，类似快捷键的一种。File-&gt;Settings-&gt;Plugins-&gt;Browse repositories，搜索框输入butterknife，会出来很多选项，我们选Android ButterKnife Zelezny，也就是评分最高的那一项。如下图：</p><p><img src="/daixuenan.github.io/2018/11/08/develop/dailyshare/eventbus/butterknife/butterknife_plugins.png" alt="image"></p><p>如果未安装插件，右侧会有Install按钮。点击Install按钮后，等待安装成功，重启Android Studio即可使用插件。</p><p>找到layout布局右键-&gt;Generate-&gt;Generate ButterKnife Injections，如下图勾选选项，最后点击confirm确认。</p><p><img src="/daixuenan.github.io/2018/11/08/develop/dailyshare/eventbus/butterknife/butterknife_generate.png" alt="image"></p><p><img src="/daixuenan.github.io/2018/11/08/develop/dailyshare/eventbus/butterknife/butterknife_config.png" alt="image"></p><p>结果如下图显示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends Activity &#123;</span><br><span class="line"></span><br><span class="line">    @BindView(R.id.btn)</span><br><span class="line">    Button btn;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ButterKnife.bind(this);</span><br><span class="line">        </span><br><span class="line">        //btn.setText(<span class="string">"我是按钮"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @OnClick(R.id.btn)</span><br><span class="line">    public void <span class="function"><span class="title">onViewClicked</span></span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取的btn可以直接使用。</p><h6 id="原创地址-https-13811914041-github-io-daixuenan-github-io-1"><a href="#原创地址-https-13811914041-github-io-daixuenan-github-io-1" class="headerlink" title="原创地址 https://13811914041.github.io/daixuenan.github.io/"></a>原创地址 <a href="https://13811914041.github.io/daixuenan.github.io/">https://13811914041.github.io/daixuenan.github.io/</a></h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;原创地址-https-13811914041-github-io-daixuenan-github-io&quot;&gt;&lt;a href=&quot;#原创地址-https-13811914041-github-io-daixuenan-github-io&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="Android开发" scheme="https://13811914041.github.io/daixuenan.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>ButterKnife插件集成及使用</title>
    <link href="https://13811914041.github.io/daixuenan.github.io/2018/11/07/develop/dailyshare/butterknife/"/>
    <id>https://13811914041.github.io/daixuenan.github.io/2018/11/07/develop/dailyshare/butterknife/</id>
    <published>2018-11-06T16:00:00.000Z</published>
    <updated>2018-11-08T08:40:07.542Z</updated>
    
    <content type="html"><![CDATA[<h6 id="原创地址-https-13811914041-github-io-daixuenan-github-io"><a href="#原创地址-https-13811914041-github-io-daixuenan-github-io" class="headerlink" title="原创地址 https://13811914041.github.io/daixuenan.github.io/"></a>原创地址 <a href="https://13811914041.github.io/daixuenan.github.io/">https://13811914041.github.io/daixuenan.github.io/</a></h6><p>我们Android日常开发，经常用到控件，而且在用控件之前，要先获取控件id，再进行操作。看下以前的某位同事的代码：</p><p>定义控件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private TextView textView;</span><br></pre></td></tr></table></figure></p><p>获取控件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textView = (TextView)findViewById(R.id.textView);</span><br></pre></td></tr></table></figure></p><p>这样的代码复制粘贴多了，是挺烦的。而且还经常遇见空指针异常。比如看下面这个Activity：</p><p>MainActivity.java<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private TextView tvText;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"解决冲突"</span>;</span><br><span class="line"></span><br><span class="line">//        tvText = findViewById(R.id.tv_text);</span><br><span class="line"></span><br><span class="line">        // 文本</span><br><span class="line">        tvText.setText(getString(R.string.this_is_a_text));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E/AndroidRuntime: FATAL EXCEPTION: main</span><br><span class="line">                  Process: com.example.dai.myapplication, PID: 9642</span><br><span class="line">                  java.lang.RuntimeException: Unable to start activity ComponentInfo&#123;com.example.dai.myapplication/com.example.dai.myapplication.MainActivity&#125;: </span><br><span class="line">                  java.lang.NullPointerException: Attempt to invoke virtual method <span class="string">'void android.widget.TextView.setText(java.lang.CharSequence)'</span> on a null object reference</span><br></pre></td></tr></table></figure><p>注意看<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void android.widget.TextView.setText(java.lang.CharSequence)<span class="string">' on a null object reference</span></span><br></pre></td></tr></table></figure></p><p>是没有获取到TextView，也就是没有写下面这一句：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tvText = findViewById(R.id.tv_text);</span><br></pre></td></tr></table></figure></p><p>当ID很多时这个情况确实是容易被忽略掉的。</p><p>那就进入正题，看看ButterKnife吧。</p><p>先看一下用了ButterKnife的代码是什么样的：</p><p>MainActivity.java<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @BindView(R.id.tv_text)</span><br><span class="line">    TextView tvText;</span><br><span class="line">    @BindView(R.id.tv_text2)</span><br><span class="line">    TextView tvText2;</span><br><span class="line">    @BindView(R.id.tv_text3)</span><br><span class="line">    TextView tvText3;</span><br><span class="line">    @BindView(R.id.tv_text4)</span><br><span class="line">    TextView tvText4;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ButterKnife.bind(this);</span><br><span class="line"></span><br><span class="line">        // 文本</span><br><span class="line">        tvText.setText(getString(R.string.this_is_a_text));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @OnClick(&#123;R.id.tv_text, R.id.tv_text2, R.id.tv_text3, R.id.tv_text4&#125;)</span><br><span class="line">    public void onViewClicked(View view) &#123;</span><br><span class="line">        switch (view.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.tv_text:</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.tv_text2:</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.tv_text3:</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.tv_text4:</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>十分整洁。常用的控件获取和点击事件都不需要写代码，可以根据插件自动生成。接下来开始集成。</p><h3 id="ButterKnife插件"><a href="#ButterKnife插件" class="headerlink" title="ButterKnife插件"></a>ButterKnife插件</h3><p>插件不同于library库，它是作用在Android Studio上的，类似快捷键的一种。File-&gt;Settings-&gt;Plugins-&gt;Browse repositories，搜索框输入butterknife，会出来很多选项，我们选Android ButterKnife Zelezny，也就是评分最高的那一项。如下图：</p><p><img src="/daixuenan.github.io/2018/11/07/develop/dailyshare/butterknife/butterknife_plugins.png" alt="image"></p><p>如果未安装插件，右侧会有Install按钮。点击Install按钮后，等待安装成功，重启Android Studio即可使用插件。</p><p>找到layout布局右键-&gt;Generate-&gt;Generate ButterKnife Injections，如下图勾选选项，最后点击confirm确认。</p><p><img src="/daixuenan.github.io/2018/11/07/develop/dailyshare/butterknife/butterknife_generate.png" alt="image"></p><p><img src="/daixuenan.github.io/2018/11/07/develop/dailyshare/butterknife/butterknife_config.png" alt="image"></p><p>结果如下图显示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends Activity &#123;</span><br><span class="line"></span><br><span class="line">    @BindView(R.id.btn)</span><br><span class="line">    Button btn;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ButterKnife.bind(this);</span><br><span class="line">        </span><br><span class="line">        //btn.setText(<span class="string">"我是按钮"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @OnClick(R.id.btn)</span><br><span class="line">    public void <span class="function"><span class="title">onViewClicked</span></span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取的btn可以直接使用。</p><h6 id="原创地址-https-13811914041-github-io-daixuenan-github-io-1"><a href="#原创地址-https-13811914041-github-io-daixuenan-github-io-1" class="headerlink" title="原创地址 https://13811914041.github.io/daixuenan.github.io/"></a>原创地址 <a href="https://13811914041.github.io/daixuenan.github.io/">https://13811914041.github.io/daixuenan.github.io/</a></h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;原创地址-https-13811914041-github-io-daixuenan-github-io&quot;&gt;&lt;a href=&quot;#原创地址-https-13811914041-github-io-daixuenan-github-io&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="Android开发" scheme="https://13811914041.github.io/daixuenan.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>摘要</title>
    <link href="https://13811914041.github.io/daixuenan.github.io/2018/08/15/camera/begin/abstract/"/>
    <id>https://13811914041.github.io/daixuenan.github.io/2018/08/15/camera/begin/abstract/</id>
    <published>2018-08-14T16:00:00.000Z</published>
    <updated>2018-08-15T08:39:12.050Z</updated>
    
    <content type="html"><![CDATA[<h6 id="原创地址-https-13811914041-github-io-daixuenan-github-io"><a href="#原创地址-https-13811914041-github-io-daixuenan-github-io" class="headerlink" title="原创地址 https://13811914041.github.io/daixuenan.github.io/"></a>原创地址 <a href="https://13811914041.github.io/daixuenan.github.io/">https://13811914041.github.io/daixuenan.github.io/</a></h6><p>开始接触摄影了，从小白开始学习，过两天就会入手一个微单，开始作死之旅。期间会记录分享自己学到的知识，以及自己的作品。兵马未动粮草先行，相机未到手，但是士气已经高涨，给自己加油。</p><h6 id="原创地址-https-13811914041-github-io-daixuenan-github-io-1"><a href="#原创地址-https-13811914041-github-io-daixuenan-github-io-1" class="headerlink" title="原创地址 https://13811914041.github.io/daixuenan.github.io/"></a>原创地址 <a href="https://13811914041.github.io/daixuenan.github.io/">https://13811914041.github.io/daixuenan.github.io/</a></h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;原创地址-https-13811914041-github-io-daixuenan-github-io&quot;&gt;&lt;a href=&quot;#原创地址-https-13811914041-github-io-daixuenan-github-io&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="摄影之旅" scheme="https://13811914041.github.io/daixuenan.github.io/categories/%E6%91%84%E5%BD%B1%E4%B9%8B%E6%97%85/"/>
    
    
  </entry>
  
  <entry>
    <title>真机调试</title>
    <link href="https://13811914041.github.io/daixuenan.github.io/2018/08/14/develop/beign/phone_debug/"/>
    <id>https://13811914041.github.io/daixuenan.github.io/2018/08/14/develop/beign/phone_debug/</id>
    <published>2018-08-13T16:00:00.000Z</published>
    <updated>2018-08-15T08:39:00.255Z</updated>
    
    <content type="html"><![CDATA[<h6 id="原创地址-https-13811914041-github-io-daixuenan-github-io"><a href="#原创地址-https-13811914041-github-io-daixuenan-github-io" class="headerlink" title="原创地址 https://13811914041.github.io/daixuenan.github.io/"></a>原创地址 <a href="https://13811914041.github.io/daixuenan.github.io/">https://13811914041.github.io/daixuenan.github.io/</a></h6><p>真机调试通常把手机插上数据线，连接到电脑上，点击debug调试，弹出框就会显示设备，选择设备即可安装安卓软件。在这里，我假设是新手机第一次调试。这样的话我们需要进行以下几个步骤：</p><h4 id="激活开发者模式"><a href="#激活开发者模式" class="headerlink" title="* 激活开发者模式"></a>* 激活开发者模式</h4><h4 id="打开USB调试"><a href="#打开USB调试" class="headerlink" title="* 打开USB调试"></a>* 打开USB调试</h4><h4 id="连接调试设备"><a href="#连接调试设备" class="headerlink" title="* 连接调试设备"></a>* 连接调试设备</h4><h2 id="激活开发者模式-1"><a href="#激活开发者模式-1" class="headerlink" title="激活开发者模式"></a>激活开发者模式</h2><p>以我的手机，小米MIX2为例。现在的新手机通常刚到手是看不见开发者选项的，需要去激活开发者选项。激活流程为设置-&gt;我的设备-&gt;全部参数，然后一直连点 MIUI 版本处直到打开开发者模式为止。然后设置-&gt;更多设置，开发者选项就出现了。不同的手机激活位置不一样，大体思路都是进入手机信息，尝试连点各个版本信息往往就可以找到激活开发者选项的地方。如下图：</p><center class="half"><br>    <img src="/daixuenan.github.io/2018/08/14/develop/beign/phone_debug/active_img1.png" width="300"><br>    <img src="/daixuenan.github.io/2018/08/14/develop/beign/phone_debug/active_img2.png" width="300"><br></center><h2 id="打开USB调试-1"><a href="#打开USB调试-1" class="headerlink" title="打开USB调试"></a>打开USB调试</h2><p>打开开发者选项，打开USB调试选项，一些手机还需要打开USB安装选项（如果有的话就需要打开，且需要安装sim卡才可以打开）</p><center class="half"><br>    <img src="/daixuenan.github.io/2018/08/14/develop/beign/phone_debug/active_img3.png" width="300"><br>    <img src="/daixuenan.github.io/2018/08/14/develop/beign/phone_debug/active_img4.png" width="300"><br></center><h2 id="连接调试设备-1"><a href="#连接调试设备-1" class="headerlink" title="连接调试设备"></a>连接调试设备</h2><p>打开项目，点击debug调试按钮</p><p><img src="/daixuenan.github.io/2018/08/14/develop/beign/phone_debug/debug_app.png" alt="image"></p><p>选择调试设备，点击OK</p><p><img src="/daixuenan.github.io/2018/08/14/develop/beign/phone_debug/debug_app2.png" alt="image"></p><p>手机安装成功</p><p><img src="/daixuenan.github.io/2018/08/14/develop/beign/phone_debug/debug_app_success.png" alt="image"></p><p>到这里，就可以修改代码，调试项目了。</p><h6 id="原创地址-https-13811914041-github-io-daixuenan-github-io-1"><a href="#原创地址-https-13811914041-github-io-daixuenan-github-io-1" class="headerlink" title="原创地址 https://13811914041.github.io/daixuenan.github.io/"></a>原创地址 <a href="https://13811914041.github.io/daixuenan.github.io/">https://13811914041.github.io/daixuenan.github.io/</a></h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;原创地址-https-13811914041-github-io-daixuenan-github-io&quot;&gt;&lt;a href=&quot;#原创地址-https-13811914041-github-io-daixuenan-github-io&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="Android开发" scheme="https://13811914041.github.io/daixuenan.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>模拟器调试</title>
    <link href="https://13811914041.github.io/daixuenan.github.io/2018/08/14/develop/beign/virtual_debug/"/>
    <id>https://13811914041.github.io/daixuenan.github.io/2018/08/14/develop/beign/virtual_debug/</id>
    <published>2018-08-13T16:00:00.000Z</published>
    <updated>2018-08-15T08:39:04.891Z</updated>
    
    <content type="html"><![CDATA[<h6 id="原创链接-https-13811914041-github-io-daixuenan-github-io-2018-08-13-beign-virtual-debug"><a href="#原创链接-https-13811914041-github-io-daixuenan-github-io-2018-08-13-beign-virtual-debug" class="headerlink" title="原创链接 https://13811914041.github.io/daixuenan.github.io/2018/08/13/beign/virtual_debug/"></a>原创链接 <a href="https://13811914041.github.io/daixuenan.github.io/2018/08/13/beign/virtual_debug/">https://13811914041.github.io/daixuenan.github.io/2018/08/13/beign/virtual_debug/</a></h6><p>通常调试Android代码的时候，我们一般习惯用真机调试，因为真机功能全，而且速度相对快一些。但是有时候没有真机的环境下，就需要模拟器来调试代码。Android Studio有自带的虚拟机，可根据自己需求的选择API版本。除了安卓自带的模拟器，还有第三方模拟器，功能强大且性能优秀，如逍遥模拟器、夜神模拟器、腾讯的模拟器。第三方的模拟器主要是用来玩的，由于其性能的优越性，拿来调试项目也是不错的选择。</p><h3 id="在这里，我只重点介绍第三方模拟器调试。因为第三方模拟器搭建起来比较方便，速度快；Android-Studio自带的模拟器还是很慢的，不太适合实际开发调试。下面以逍遥模拟器为例："><a href="#在这里，我只重点介绍第三方模拟器调试。因为第三方模拟器搭建起来比较方便，速度快；Android-Studio自带的模拟器还是很慢的，不太适合实际开发调试。下面以逍遥模拟器为例：" class="headerlink" title="在这里，我只重点介绍第三方模拟器调试。因为第三方模拟器搭建起来比较方便，速度快；Android Studio自带的模拟器还是很慢的，不太适合实际开发调试。下面以逍遥模拟器为例："></a>在这里，我只重点介绍第三方模拟器调试。因为第三方模拟器搭建起来比较方便，速度快；Android Studio自带的模拟器还是很慢的，不太适合实际开发调试。下面以逍遥模拟器为例：</h3><h1 id="逍遥模拟器调试"><a href="#逍遥模拟器调试" class="headerlink" title="逍遥模拟器调试"></a>逍遥模拟器调试</h1><h2 id="逍遥模拟器下载"><a href="#逍遥模拟器下载" class="headerlink" title="逍遥模拟器下载"></a><a href="http://www.xyaz.cn/" target="_blank" rel="noopener">逍遥模拟器下载</a></h2><p>下载安装方法不多做介绍，和普通软件安装流程一样。注意选择个人版即可。下载完成后双击图标打开模拟器，第一次打开需要初始化，比较慢。</p><p><img src="/daixuenan.github.io/2018/08/14/develop/beign/virtual_debug/xiaoyao.png" alt="image"></p><p>里面会推荐很多游戏，要禁得住诱惑。</p><p><img src="/daixuenan.github.io/2018/08/14/develop/beign/virtual_debug/xiaoyao2.png" alt="image"></p><p>此时已经可以调试了。打开项目，点击debug调试按钮</p><p><img src="/daixuenan.github.io/2018/08/14/develop/beign/virtual_debug/debug_app.png" alt="image"></p><p>选择调试的设备，点击OK即可开始安装，需等待，可依据底部状态条状态。如果没有设备，将模拟器关掉重新打开即可。</p><p><img src="/daixuenan.github.io/2018/08/14/develop/beign/virtual_debug/debug_app2.png" alt="image"></p><p><img src="/daixuenan.github.io/2018/08/14/develop/beign/virtual_debug/debug_app3.png" alt="image"></p><p>至此，就可以修改代码调试APP了。</p><h1 id="安卓自带模拟器调试"><a href="#安卓自带模拟器调试" class="headerlink" title="安卓自带模拟器调试"></a>安卓自带模拟器调试</h1><p>如下图：</p><p><img src="/daixuenan.github.io/2018/08/14/develop/beign/virtual_debug/create_virtual1.png" alt="image"></p><p>然后点击Create Virtual Device，选择设备类型及型号（默认即可），next，</p><p><img src="/daixuenan.github.io/2018/08/14/develop/beign/virtual_debug/create_virtual2.png" alt="image"></p><p>选择模拟器API版本，可选择一个点击download，等待下载安装完成后选中并点击next。我下载的是API 25，7.1.1版本。</p><p><img src="/daixuenan.github.io/2018/08/14/develop/beign/virtual_debug/create_virtual3.png" alt="image"></p><p>输入虚拟机名称，选择横竖屏。通常手机是竖屏，平板是横屏。一般情况我们选默认的竖屏就好。点击finish即可完成虚拟机创建。</p><p><img src="/daixuenan.github.io/2018/08/14/develop/beign/virtual_debug/create_virtual4.png" alt="image"></p><p><img src="/daixuenan.github.io/2018/08/14/develop/beign/virtual_debug/create_virtual_finish.png" alt="image"></p><p>点击启动按钮开启虚拟机，等待虚拟机启动成功后，即可调试。（这个虚拟机我没有成功打开）</p><h6 id="原创地址-https-13811914041-github-io-daixuenan-github-io"><a href="#原创地址-https-13811914041-github-io-daixuenan-github-io" class="headerlink" title="原创地址 https://13811914041.github.io/daixuenan.github.io/"></a>原创地址 <a href="https://13811914041.github.io/daixuenan.github.io/">https://13811914041.github.io/daixuenan.github.io/</a></h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;原创链接-https-13811914041-github-io-daixuenan-github-io-2018-08-13-beign-virtual-debug&quot;&gt;&lt;a href=&quot;#原创链接-https-13811914041-github-io-daix
      
    
    </summary>
    
      <category term="Android开发" scheme="https://13811914041.github.io/daixuenan.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>开启安卓之旅</title>
    <link href="https://13811914041.github.io/daixuenan.github.io/2018/08/14/develop/start/start_android/"/>
    <id>https://13811914041.github.io/daixuenan.github.io/2018/08/14/develop/start/start_android/</id>
    <published>2018-08-13T16:00:00.000Z</published>
    <updated>2018-08-15T08:38:27.462Z</updated>
    
    <content type="html"><![CDATA[<h6 id="原创地址-https-13811914041-github-io-daixuenan-github-io"><a href="#原创地址-https-13811914041-github-io-daixuenan-github-io" class="headerlink" title="原创地址 https://13811914041.github.io/daixuenan.github.io/"></a>原创地址 <a href="https://13811914041.github.io/daixuenan.github.io/">https://13811914041.github.io/daixuenan.github.io/</a></h6><p>下面我们可以开始安卓开发了，不过在开始之前，我觉得有必要介绍一下安卓project的目录结构，让大家认清各个文件类型的作用，在写代码之前对安卓有个大体的了解。</p><p>安卓目录可以有多种表现形式，如下图：</p><p><img src="/daixuenan.github.io/2018/08/14/develop/start/start_android/select_view.png" alt="image"></p><p>常用的有project和android两种视图，project目录结构将项目所有文件都展示出来；Android目录结构是安卓项目特有的结构，只展示可编辑的项目文件目录。本人比较习惯Android目录结构，因为简洁，找文件方便。我也推荐使用Android目录结构，包括接下来的目录结构介绍也是根据Android结构来。project目录结构也可一一对应。</p><p><img src="/daixuenan.github.io/2018/08/14/develop/start/start_android/folder.png" alt="iamge"></p><p>如上图所示，我们能看见app目录，app下有mainifest、java、res文件夹。library目录，下面还有Gradle Scripts及下面一群文件。library是moudle依赖库，结构与app基本一样，不过不适合现在就说，在后面会写。</p><h3 id="app"><a href="#app" class="headerlink" title="app"></a>app</h3><p>项目主目录。主要的业务逻辑都会在这里实现。</p><h3 id="Gradle-Scripts"><a href="#Gradle-Scripts" class="headerlink" title="Gradle Scripts"></a>Gradle Scripts</h3><p>这个不是一个目录，而是Android目录结构将配置文件都提取出来统一放在这一层管理，这也是我喜欢Android视图结构的原因之一。</p><h3 id="mainifest"><a href="#mainifest" class="headerlink" title="mainifest"></a>mainifest</h3><p>这个目录下有一个AndroidMainifest.xml文件，主要用来配置权限和一些Activity(可以理解为页面)，Service(应用后台服务)，以及一些其他应用的信息。</p><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p>这个目录存放需要实现的业务逻辑的代码</p><h3 id="res"><a href="#res" class="headerlink" title="res"></a>res</h3><p>这个是资源文件夹，里面存放项目的资源文件。</p><h3 id="drawable-和-mipmap"><a href="#drawable-和-mipmap" class="headerlink" title="drawable 和 mipmap"></a>drawable 和 mipmap</h3><p>图片资源文件，目前我比较习惯drawable为主。二选一即可。</p><h3 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h3><p>静态布局文件。Android的页面往往都是先实现layout文件下面的.xml静态布局文件，然后用java代码来控制布局文件的属性，以达到各式各样的交互效果。通常我们用Activity、Fragment来控制，有时候我们也会自定义控件、布局、对话框之类，可以调用静态布局文件。</p><h3 id="values"><a href="#values" class="headerlink" title="values"></a>values</h3><p>values文件夹下存放的都是一些设置好的值或者样式。colors里面可以设置颜色属性；strings可以配置可供全局使用的字符串；styles可以设置各种样式，包括主题风格到具体控件样式。</p><p>除此之外还有其他一些不可见的文件。attrs用来定义各控件布局的属性，且支持在静态layout布局配置；dimens定义全局的数值，包括长宽高、文字的大小；arrays顾名思义数组，将各类值归纳到一个数组中供全局调用。</p><p>以上文件均各自实现各自名称相应的功能，不过我也可以在strings.xml添加colors的全局配置，虽然有各自的名字，但是使用是很灵活的。不过我们一般统一规范，该在哪里写就在哪里写，这也是必须严格注意的。</p><h3 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h3><p>这个是项目的主要配置文件。一般新建的项目会有两个build.gradle文件，看后面的()内容，Project开头的是项目的全局配置文件，Module开头的是各自模块（module）的配置文件。如果后面添加了很多module依赖，则会出现相应的build.gradle配置文件。()内冒号后面是该Project/Module的名字。</p><h2 id="以下是不需要关注太多的，知道就行"><a href="#以下是不需要关注太多的，知道就行" class="headerlink" title="以下是不需要关注太多的，知道就行"></a>以下是不需要关注太多的，知道就行</h2><h3 id="gradle-wrapper-properties"><a href="#gradle-wrapper-properties" class="headerlink" title="gradle-wrapper.properties"></a>gradle-wrapper.properties</h3><p>项目gradle的配置文件。通常Android Studio会自动配置好。除非出了问题，才需要处理。</p><h3 id="proguard-rules-pro"><a href="#proguard-rules-pro" class="headerlink" title="proguard-rules.pro"></a>proguard-rules.pro</h3><p>配置项目的混淆代码。目前有免费的线上加固包，挺方便的。</p><h3 id="gradle-properties"><a href="#gradle-properties" class="headerlink" title="gradle.properties"></a>gradle.properties</h3><p>配置静态变量以供build.gradle调用。</p><h3 id="local-properties"><a href="#local-properties" class="headerlink" title="local.properties"></a>local.properties</h3><p>通常自动生成，不用管。配置静态变量以供java代码调用。这里一般会有SDK路径配置，有NDK的话还会有NDK路径配置。</p><h3 id="local-properties-1"><a href="#local-properties-1" class="headerlink" title="local.properties"></a>local.properties</h3><p>依赖的modules，自动生成，不用管。</p><h2 id="另外还有一些其他目录"><a href="#另外还有一些其他目录" class="headerlink" title="另外还有一些其他目录"></a>另外还有一些其他目录</h2><h3 id="libs"><a href="#libs" class="headerlink" title="libs"></a>libs</h3><p>app目录同级目录。这个文件夹需要切换到project目录结构才能看见，里面存放库文件。若有.so库，则会有相对应的jniLibs文件生成（需要一些配置）。一般本地.jar包、本地.so文件、.arr包在这里添加。</p><h3 id="assets"><a href="#assets" class="headerlink" title="assets"></a>assets</h3><p>app目录同级目录。也是存放资源文件为主，与res的区别是这里存放一些特殊的文件及一些较大文件。如txt文本、本地音视频等。较大的图片也可以存放在这里。</p><h3 id="anim"><a href="#anim" class="headerlink" title="anim"></a>anim</h3><p>res目录下的子目录。通常存放一些动画属性。</p><h3 id="menu"><a href="#menu" class="headerlink" title="menu"></a>menu</h3><p>res目录下的子目录。菜单的配置。较少用。通常都是自行在代码中实现。</p><h5 id="关于这些目录结构下的文件的配置用法，后面会根据实例写到。接下来，就可以写代码了。"><a href="#关于这些目录结构下的文件的配置用法，后面会根据实例写到。接下来，就可以写代码了。" class="headerlink" title="关于这些目录结构下的文件的配置用法，后面会根据实例写到。接下来，就可以写代码了。"></a>关于这些目录结构下的文件的配置用法，后面会根据实例写到。接下来，就可以写代码了。</h5><h6 id="原创地址-https-13811914041-github-io-daixuenan-github-io-1"><a href="#原创地址-https-13811914041-github-io-daixuenan-github-io-1" class="headerlink" title="原创地址 https://13811914041.github.io/daixuenan.github.io/"></a>原创地址 <a href="https://13811914041.github.io/daixuenan.github.io/">https://13811914041.github.io/daixuenan.github.io/</a></h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;原创地址-https-13811914041-github-io-daixuenan-github-io&quot;&gt;&lt;a href=&quot;#原创地址-https-13811914041-github-io-daixuenan-github-io&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="Android开发" scheme="https://13811914041.github.io/daixuenan.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>TextView文本控件的使用</title>
    <link href="https://13811914041.github.io/daixuenan.github.io/2018/08/14/develop/widget/textview/"/>
    <id>https://13811914041.github.io/daixuenan.github.io/2018/08/14/develop/widget/textview/</id>
    <published>2018-08-13T16:00:00.000Z</published>
    <updated>2018-08-15T08:38:07.410Z</updated>
    
    <content type="html"><![CDATA[<h6 id="原创地址-https-13811914041-github-io-daixuenan-github-io"><a href="#原创地址-https-13811914041-github-io-daixuenan-github-io" class="headerlink" title="原创地址 https://13811914041.github.io/daixuenan.github.io/"></a>原创地址 <a href="https://13811914041.github.io/daixuenan.github.io/">https://13811914041.github.io/daixuenan.github.io/</a></h6><h5 id="TextView是安卓开发常用的控件，其作用是展示文本内容。可以根据需求，展示丰富的视觉效果。"><a href="#TextView是安卓开发常用的控件，其作用是展示文本内容。可以根据需求，展示丰富的视觉效果。" class="headerlink" title="TextView是安卓开发常用的控件，其作用是展示文本内容。可以根据需求，展示丰富的视觉效果。"></a>TextView是安卓开发常用的控件，其作用是展示文本内容。可以根据需求，展示丰富的视觉效果。</h5><p>首先，打开Android Studio，找到activity_main.xml文件并双击打开。</p><p><img src="/daixuenan.github.io/2018/08/14/develop/widget/textview/textview1.png" alt="image"></p><p><img src="/daixuenan.github.io/2018/08/14/develop/widget/textview/textview2.png" alt="image"></p><p>可以看到，新创建的项目里，已经在activity_main.xml里面已经写了TextView。</p><p>activity_main.xml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">    android:id=<span class="string">"@+id/tv_text"</span></span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:text=<span class="string">"我是一个文本"</span></span><br><span class="line">    android:textColor=<span class="string">"#00ff00"</span></span><br><span class="line">    android:textSize=<span class="string">"24sp"</span> /&gt;</span><br></pre></td></tr></table></figure></p><p>通过上段代码，就可以编辑出一个有文本内容，有id，宽高，颜色，文字大小设置好的TextView。运行，即可看见效果。</p><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>通常我们为一个控件设置id,可以在上下文引用。同时在java代码中我们也通过id来获取一个控件设置它的属性。</p><h3 id="layout-width-layout-height"><a href="#layout-width-layout-height" class="headerlink" title="layout_width layout_height"></a>layout_width layout_height</h3><p>控件的宽高。通常我们会用wrap_content、match_parent、fill_parent以及dp单位的数值设置它的属性，dp单位的数值比如30dp这样表示。wrap_content是自适应，match_parent和fill_parent是填充，但还是有有区别的，这个后面再说。</p><h3 id="text"><a href="#text" class="headerlink" title="text"></a>text</h3><p>虽然只是个文本属性，但还是要说的。通常规范写法不会直接将文本写在这里，而是将文本配置到res-&gt;values-&gt;strings.xml中引用。</p><p>strings.xml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;string name=<span class="string">"this_is_a_text"</span>&gt;这是一个文本&lt;/string&gt;</span><br></pre></td></tr></table></figure></p><p>在resources标签内依照格式添加上面的代码。name命名小写，单词以下划线相连。</p><p>TextView属性设置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text=<span class="string">"@string/this_is_a_text"</span></span><br></pre></td></tr></table></figure></p><h3 id="textColor"><a href="#textColor" class="headerlink" title="textColor"></a>textColor</h3><p>文本颜色也需要配置好以后再引用，位置在res-&gt;values-&gt;colors.xml。</p><p>colors.xml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;color name=<span class="string">"text_color"</span>&gt;<span class="comment">#999999&lt;/color&gt;</span></span><br></pre></td></tr></table></figure></p><p>TextView属性设置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:textColor=<span class="string">"@color/text_color"</span></span><br></pre></td></tr></table></figure></p><h3 id="textSize"><a href="#textSize" class="headerlink" title="textSize"></a>textSize</h3><p>文字大小我们通常用sp单位，与dp单位的区别是，sp单位的文字大小可根据系统设置改变。文字大小属性包括一些常用的dp单位值一般都存在dimens.xml文件里。</p><p>找到values文件夹，右键-&gt;new-&gt;XML-&gt;Values XML File，在弹出框输入dimens，.xml后缀会自动生成。</p><p>dimens.xml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;dimen name=<span class="string">"text_size_15"</span>&gt;15sp&lt;/dimen&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></p><p>TextView属性设置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:textSize=<span class="string">"@dimen/text_size_15"</span></span><br></pre></td></tr></table></figure></p><p>在activity_main.xml设置了属性以后，我们可以在MainActivity中操作这个控件。<br>MainActivity.java<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private TextView tvText;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        tvText = findViewById(R.id.tv_text);</span><br><span class="line"></span><br><span class="line">        // 文本</span><br><span class="line">        tvText.setText(getString(R.string.this_is_a_text));</span><br><span class="line"></span><br><span class="line">        //颜色</span><br><span class="line">        tvText.setTextColor(getResources().getColor(R.color.text_color));</span><br><span class="line"></span><br><span class="line">        //点击事件</span><br><span class="line">        tvText.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View view) &#123;</span><br><span class="line">                //提示框</span><br><span class="line">                Toast.makeText(MainActivity.this, <span class="string">"点击事件"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="这些都是基本属性，看起来也不是很多。其实TextView的属性是很多的，在这里我就偷点赖。其他的属性为什么没介绍，是因为这些首先是有API的，另外网上都能搜到，需要用什么搜一搜就能搜到了。如果有时间的话，我可以考虑再整理一遍。"><a href="#这些都是基本属性，看起来也不是很多。其实TextView的属性是很多的，在这里我就偷点赖。其他的属性为什么没介绍，是因为这些首先是有API的，另外网上都能搜到，需要用什么搜一搜就能搜到了。如果有时间的话，我可以考虑再整理一遍。" class="headerlink" title="这些都是基本属性，看起来也不是很多。其实TextView的属性是很多的，在这里我就偷点赖。其他的属性为什么没介绍，是因为这些首先是有API的，另外网上都能搜到，需要用什么搜一搜就能搜到了。如果有时间的话，我可以考虑再整理一遍。"></a>这些都是基本属性，看起来也不是很多。其实TextView的属性是很多的，在这里我就偷点赖。其他的属性为什么没介绍，是因为这些首先是有API的，另外网上都能搜到，需要用什么搜一搜就能搜到了。如果有时间的话，我可以考虑再整理一遍。</h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;原创地址-https-13811914041-github-io-daixuenan-github-io&quot;&gt;&lt;a href=&quot;#原创地址-https-13811914041-github-io-daixuenan-github-io&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="Android开发" scheme="https://13811914041.github.io/daixuenan.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>版本控制环境搭建</title>
    <link href="https://13811914041.github.io/daixuenan.github.io/2018/08/14/develop/start/start_version_control/"/>
    <id>https://13811914041.github.io/daixuenan.github.io/2018/08/14/develop/start/start_version_control/</id>
    <published>2018-08-13T16:00:00.000Z</published>
    <updated>2018-08-15T08:38:34.642Z</updated>
    
    <content type="html"><![CDATA[<h6 id="原创地址-https-13811914041-github-io-daixuenan-github-io"><a href="#原创地址-https-13811914041-github-io-daixuenan-github-io" class="headerlink" title="原创地址 https://13811914041.github.io/daixuenan.github.io/"></a>原创地址 <a href="https://13811914041.github.io/daixuenan.github.io/">https://13811914041.github.io/daixuenan.github.io/</a></h6><p>日常工作我们通常会将写好的代码上传到服务器，这时候就需要版本控制工具。一般我们常用的版本控制工具是git和svn，在这里我说下最常用的Git的环境搭建。</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git下载</a></p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>下载git然后安装，一路next，全部默认即可。安装git后，在文件夹内右键就可以看见多出了git的功能。选择Git Bash Here，进入git命令窗口。安装流程很简单。</p><p>接下来打开Android Studio，Settings-&gt;Version Control-&gt;Git，在Path to Git executable一栏配置git安装路径，添加Git安装目录下的cmd/git.exe文件即可，添加成功后可点击Test按钮测试，成功提示如下图：</p><p><img src="/daixuenan.github.io/2018/08/14/develop/start/start_version_control/git_test.png" alt="image"></p><p>接下来不是立马使用git，而是要先配置SSH。Git仓库平台常用的有Github，码云，GitLab等，而且一般在设置页面都会有相应的教程。</p><h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><p>找个文件夹，鼠标空白处右键，Git Bash Here。</p><p>生成 sshkey:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot;  </span><br><span class="line"></span><br><span class="line"># xxxxx@xxxxx.com是平台注册的邮箱</span><br><span class="line"># Generating public/private rsa key pair...</span><br><span class="line"># 三次回车即可生成 ssh key</span><br></pre></td></tr></table></figure></p><p>查看你的 public key<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p><p><img src="/daixuenan.github.io/2018/08/14/develop/start/start_version_control/version_control_ssh.png" alt="iamge"></p><p>然后复制key配置到对应的平台上，包括开头ssh-rsa和结尾邮箱内容。</p><h3 id="Android-Studio-Git操作"><a href="#Android-Studio-Git操作" class="headerlink" title="Android Studio Git操作"></a>Android Studio Git操作</h3><p>首先，我们拉取Git项目。如下图：</p><p>点击Check out project from Version Control，选择Git<br><img src="/daixuenan.github.io/2018/08/14/develop/start/start_version_control/checkout_project1.png" alt="image"></p><p>Url可以暂时先用我这个<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:13811914041/MyApplication.git，或者自己有的话也可以用自己的。第二个是项目存放路径，需要自己选；最后一个是项目名称，通常是默认用Git仓库的文件夹名称，也可以自己编辑。<br><img src="/daixuenan.github.io/2018/08/14/develop/start/start_version_control/checkout_project2.png" alt="image"></p><p>Gradle版本，选择默认的第一个，接下来全部一路next，直到完成，然后再等待编译成功即可。<br><img src="/daixuenan.github.io/2018/08/14/develop/start/start_version_control/checkout_project3.png" alt="image"></p><p>代码拉下来，编译好之后，就可以编辑代码了。编辑完代码可以在Android Studio内部通过版本控制提交和拉取代码。</p><p>Android Studio页面右上角控制面板有版本控制上传、下拉的快捷键(不同版本的Android Studio图标可能有差异，不过位置是固定在这个位置的，比较好找)，如下图：<br><img src="/daixuenan.github.io/2018/08/14/develop/start/start_version_control/version_control1.png" alt="image"></p><p>左边的按钮是拉取最新代码，通常默认即可<br><img src="/daixuenan.github.io/2018/08/14/develop/start/start_version_control/version_control2.png" alt="image"></p><p>右边的按钮是上传代码<br><img src="/daixuenan.github.io/2018/08/14/develop/start/start_version_control/version_control3.png" alt="image"></p><p>红色的文件是没有加入到版本控制的，如果想加入到版本控制，可右键-&gt;Add to VCS。提交的时候Commit Message通常需要填写更新内容，否则无法提交成功。提交点击Commit即可，或者点击下拉箭头直接选择Commit and Push，可直接提交并推送到远程分支。</p><p>若没有选择Commit and Push，可自行再次push。顶部VCS-&gt;Git-&gt;push，点击下方push即可。如下图：<br><img src="/daixuenan.github.io/2018/08/14/develop/start/start_version_control/git_push.png" alt="image"></p><p>点击push按钮，提交成功就可以了。<br><img src="/daixuenan.github.io/2018/08/14/develop/start/start_version_control/git_push2.png" alt="image"></p><p>如果有冲突的话，会弹出提示框，如下图：<br><img src="/daixuenan.github.io/2018/08/14/develop/start/start_version_control/merge1.png" alt="image"></p><p>点击Merge，有时会Git会自动解决一些简单的冲突，但是通常冲突还是需要自己解决的。如下图：<br><img src="/daixuenan.github.io/2018/08/14/develop/start/start_version_control/merge2.png" alt="image"></p><p>中间就是冲突文件列表，右侧按钮顾名思义：Accept Yours，选中文件使用自己的版本；Accept Theirs，选中的文件使用远程的版本；Merge，手动解决冲突。根据需求，自行取舍即可。前面两个按钮没什么可说的，如果手动解决冲突的话，有必要说一下。选中文件点击Merge按钮，弹出如下图所示页面：<br><img src="/daixuenan.github.io/2018/08/14/develop/start/start_version_control/merge3.png" alt="image"></p><p>视图有三个框，左边是本地的文件，右边是远程的文件，中间是本地上次更新的文件。将两个版本的冲突合并到中间文件即可完成解决冲突的操作。</p><p>提示：箭头处红色的是某同一个位置代码冲突部分，绿色部分是新增的内容。</p><p>操作：X是放弃导入代码；&gt;&gt;是导入代码。根据实际情况具体选择。</p><p>解决冲突出现如下提示，即完成冲突解决工作：<br><img src="/daixuenan.github.io/2018/08/14/develop/start/start_version_control/merge4.png" alt="image"></p><p>此时可点击Apply，提交文件。</p><p>底部有个Git:master，master是当前分支，通常我们也将master作为主分支，New Branch的功能是新建一个分支；Local Branches是本地的分支，Remote Branches是远程分支，即Git仓库分支，分之间可以相互切换，当然，要注意切换之前要处理好冲突。<br><img src="/daixuenan.github.io/2018/08/14/develop/start/start_version_control/version_control4.png" alt="image"></p><p>搭好Git环境后，就可以方便的用Android Studio内部的功能操作Git了，不需要时刻敲指令。</p><h6 id="原创地址-https-13811914041-github-io-daixuenan-github-io-1"><a href="#原创地址-https-13811914041-github-io-daixuenan-github-io-1" class="headerlink" title="原创地址 https://13811914041.github.io/daixuenan.github.io/"></a>原创地址 <a href="https://13811914041.github.io/daixuenan.github.io/">https://13811914041.github.io/daixuenan.github.io/</a></h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;原创地址-https-13811914041-github-io-daixuenan-github-io&quot;&gt;&lt;a href=&quot;#原创地址-https-13811914041-github-io-daixuenan-github-io&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="Android开发" scheme="https://13811914041.github.io/daixuenan.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>安卓环境搭建（Windows）</title>
    <link href="https://13811914041.github.io/daixuenan.github.io/2018/08/13/develop/beign/environment/"/>
    <id>https://13811914041.github.io/daixuenan.github.io/2018/08/13/develop/beign/environment/</id>
    <published>2018-08-12T16:00:00.000Z</published>
    <updated>2018-08-15T08:38:51.104Z</updated>
    
    <content type="html"><![CDATA[<h6 id="原创地址-https-13811914041-github-io-daixuenan-github-io"><a href="#原创地址-https-13811914041-github-io-daixuenan-github-io" class="headerlink" title="原创地址 https://13811914041.github.io/daixuenan.github.io/"></a>原创地址 <a href="https://13811914041.github.io/daixuenan.github.io/">https://13811914041.github.io/daixuenan.github.io/</a></h6><h2 id="JDK下载"><a href="#JDK下载" class="headerlink" title="JDK下载"></a><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">JDK下载</a></h2><p>没有JDK环境的话需要下载安装。注意勾选接受条款，并选择对应的版本，我机器是windows 64位。如下图：</p><p><img src="/daixuenan.github.io/2018/08/13/develop/beign/environment/jdk_download.png" alt="Image text"></p><h2 id="Android-SDK下载"><a href="#Android-SDK下载" class="headerlink" title="Android SDK下载"></a><a href="http://tools.android-studio.org/index.php/sdk" target="_blank" rel="noopener">Android SDK下载</a></h2><p>Android SDK在安装Android Studio时会提示安装，但是我比较习惯全部自己来，也是受到当初ecplise的安装习惯影响。</p><h2 id="Android-Studio下载"><a href="#Android-Studio下载" class="headerlink" title="Android Studio下载"></a><a href="http://www.android-studio.org/" target="_blank" rel="noopener">Android Studio下载</a></h2><p>Android Studio是目前主要的安卓开发软件，ecplise我也已经很少用了。JDK和Android SDK在Android Studio安装的时候会提示自动安装，但是我觉得不太好管理，所以全部手动安装了。</p><p>以上软件基本都是下载最新版。如下图：</p><p><img src="/daixuenan.github.io/2018/08/13/develop/beign/environment/download_packages.png" alt="Image text"></p><h3 id="然后，开始搭建环境"><a href="#然后，开始搭建环境" class="headerlink" title="然后，开始搭建环境"></a>然后，开始搭建环境</h3><h2 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a><a href="jdk_install">JDK安装</a></h2><h2 id="Android-SDK和Android-Studio安装没什么好说的，一路安装即可。"><a href="#Android-SDK和Android-Studio安装没什么好说的，一路安装即可。" class="headerlink" title="Android SDK和Android Studio安装没什么好说的，一路安装即可。"></a>Android SDK和Android Studio安装没什么好说的，一路安装即可。</h2><p>安装完成后打开Android Studio，如下图：</p><p><img src="/daixuenan.github.io/2018/08/13/develop/beign/environment/as_installed.png" alt="Image text"></p><p>如果SDK没有设置成功，可通过config-&gt;SDK，点击edit配置SDK路径，如下图：</p><p><img src="/daixuenan.github.io/2018/08/13/develop/beign/environment/sdk_setting.png" alt="Image text"></p><p><img src="/daixuenan.github.io/2018/08/13/develop/beign/environment/sdk_setting_path.png" alt="Image text"></p><h2 id="至此，安装工作完成，接下来可以创建hello-world了，比较简单。如下图："><a href="#至此，安装工作完成，接下来可以创建hello-world了，比较简单。如下图：" class="headerlink" title="至此，安装工作完成，接下来可以创建hello world了，比较简单。如下图："></a>至此，安装工作完成，接下来可以创建hello world了，比较简单。如下图：</h2><h5 id="点击Start-a-new-Android-Studio-project"><a href="#点击Start-a-new-Android-Studio-project" class="headerlink" title="点击Start a new Android Studio project"></a>点击Start a new Android Studio project</h5><p><img src="/daixuenan.github.io/2018/08/13/develop/beign/environment/as_installed.png" alt="Image text"></p><h5 id="按照提示输入项目名称、域名，选择项目目录"><a href="#按照提示输入项目名称、域名，选择项目目录" class="headerlink" title="按照提示输入项目名称、域名，选择项目目录"></a>按照提示输入项目名称、域名，选择项目目录</h5><p><img src="/daixuenan.github.io/2018/08/13/develop/beign/environment/create_project.png" alt="Image text"></p><h5 id="选择手机平板开发即可，点击next"><a href="#选择手机平板开发即可，点击next" class="headerlink" title="选择手机平板开发即可，点击next"></a>选择手机平板开发即可，点击next</h5><p><img src="/daixuenan.github.io/2018/08/13/develop/beign/environment/start_project2.png" alt="Image text"></p><h5 id="选择Empty-Activity，点击next"><a href="#选择Empty-Activity，点击next" class="headerlink" title="选择Empty Activity，点击next"></a>选择Empty Activity，点击next</h5><p><img src="/daixuenan.github.io/2018/08/13/develop/beign/environment/start_project3.png" alt="Image text"></p><h5 id="点击finish-即可完成一个项目的创建"><a href="#点击finish-即可完成一个项目的创建" class="headerlink" title="点击finish,即可完成一个项目的创建"></a>点击finish,即可完成一个项目的创建</h5><p><img src="/daixuenan.github.io/2018/08/13/develop/beign/environment/start_project4.png" alt="Image text"></p><h5 id="项目创建成功"><a href="#项目创建成功" class="headerlink" title="项目创建成功"></a>项目创建成功</h5><p><img src="/daixuenan.github.io/2018/08/13/develop/beign/environment/create_project_success.png" alt="Image text"></p><p>接下来就可以运行项目在手机上了</p><h6 id="原创地址-https-13811914041-github-io-daixuenan-github-io-1"><a href="#原创地址-https-13811914041-github-io-daixuenan-github-io-1" class="headerlink" title="原创地址 https://13811914041.github.io/daixuenan.github.io/"></a>原创地址 <a href="https://13811914041.github.io/daixuenan.github.io/">https://13811914041.github.io/daixuenan.github.io/</a></h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;原创地址-https-13811914041-github-io-daixuenan-github-io&quot;&gt;&lt;a href=&quot;#原创地址-https-13811914041-github-io-daixuenan-github-io&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="Android开发" scheme="https://13811914041.github.io/daixuenan.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>JDK安装（Windows）</title>
    <link href="https://13811914041.github.io/daixuenan.github.io/2018/08/13/develop/beign/jdk_install/"/>
    <id>https://13811914041.github.io/daixuenan.github.io/2018/08/13/develop/beign/jdk_install/</id>
    <published>2018-08-12T16:00:00.000Z</published>
    <updated>2018-08-15T08:38:56.038Z</updated>
    
    <content type="html"><![CDATA[<h6 id="原创地址-https-13811914041-github-io-daixuenan-github-io"><a href="#原创地址-https-13811914041-github-io-daixuenan-github-io" class="headerlink" title="原创地址 https://13811914041.github.io/daixuenan.github.io/"></a>原创地址 <a href="https://13811914041.github.io/daixuenan.github.io/">https://13811914041.github.io/daixuenan.github.io/</a></h6><h2 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h2><p>下载的JDK安装包包含jdk和jre两个安装包（我们主要需要jdk，jre算是附带品，开发基本不会用到），所以，我们安装的时候一般建立一个java目录，在java目录下建立jdk和jre两个子目录，分别存放jdk和jre安装文件。如下图：</p><p><img src="/daixuenan.github.io/2018/08/13/develop/beign/jdk_install/java_folder.png" alt="Image text"></p><p><img src="/daixuenan.github.io/2018/08/13/develop/beign/jdk_install/java_sub_folder.png" alt="Image text"></p><p>双击打开安装步骤，注意选择jdk文件夹，如下图：</p><p><img src="/daixuenan.github.io/2018/08/13/develop/beign/jdk_install/jdk_install.png" alt="Image text"> </p><p><img src="/daixuenan.github.io/2018/08/13/develop/beign/jdk_install/jdk_install2.png" alt="Image text"></p><p>安装完jdk就是jre,与jdk一样的步骤。找到jdk安装目录复制bin目录路径，并复制到粘贴板上(CTRL + C)，如下图：</p><p><img src="/daixuenan.github.io/2018/08/13/develop/beign/jdk_install/jdk_bin_path.png" alt="Image text"></p><p>安装完成后找到我的电脑图标右键-&gt;属性-&gt;高级系统设置-&gt;环境变量，结果如下图：</p><p><img src="/daixuenan.github.io/2018/08/13/develop/beign/jdk_install/environment_setting.png" alt="Image text"></p><p>双击系统变量下的Path，接下来win7 win8 win10系统界面不太一样，我是win10系统，不一样的页面在弹出框后面加上‘;’，再粘贴复制的路径(CTRL + V)，win10页面如下图：</p><p><img src="/daixuenan.github.io/2018/08/13/develop/beign/jdk_install/environment_path.png" alt="Image text"></p><p>在空处粘贴即可。</p><p>至此，JDK就安装完成了。可以检测一下JDK环境配置。win + R，弹出框输入cmd打开dos窗口，分别输入java -version、javac -version，查看版本号成功，即环境搭建成功，如下图：</p><h6 id="原创地址-https-13811914041-github-io-daixuenan-github-io-1"><a href="#原创地址-https-13811914041-github-io-daixuenan-github-io-1" class="headerlink" title="原创地址 https://13811914041.github.io/daixuenan.github.io/"></a>原创地址 <a href="https://13811914041.github.io/daixuenan.github.io/">https://13811914041.github.io/daixuenan.github.io/</a></h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;原创地址-https-13811914041-github-io-daixuenan-github-io&quot;&gt;&lt;a href=&quot;#原创地址-https-13811914041-github-io-daixuenan-github-io&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="Android开发" scheme="https://13811914041.github.io/daixuenan.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>摘要</title>
    <link href="https://13811914041.github.io/daixuenan.github.io/2018/08/13/develop/beign/abstract/"/>
    <id>https://13811914041.github.io/daixuenan.github.io/2018/08/13/develop/beign/abstract/</id>
    <published>2018-08-12T16:00:00.000Z</published>
    <updated>2018-08-15T08:38:45.920Z</updated>
    
    <content type="html"><![CDATA[<h6 id="原创地址-https-13811914041-github-io-daixuenan-github-io"><a href="#原创地址-https-13811914041-github-io-daixuenan-github-io" class="headerlink" title="原创地址 https://13811914041.github.io/daixuenan.github.io/"></a>原创地址 <a href="https://13811914041.github.io/daixuenan.github.io/">https://13811914041.github.io/daixuenan.github.io/</a></h6><p>安卓开发工作也已经几年了，期间想过要建立一个自己的blog，只是一直不知道该写什么。现在想想，既然不知道写什么，那就把自己这些年的积累写下来吧，以梳理过的结构，回顾一下自己从零开始学习安卓至今的历程。想学安卓的小伙伴们也欢迎来这边交流，也欢迎老司机及时指出不正之处。</p><h6 id="原创地址-https-13811914041-github-io-daixuenan-github-io-1"><a href="#原创地址-https-13811914041-github-io-daixuenan-github-io-1" class="headerlink" title="原创地址 https://13811914041.github.io/daixuenan.github.io/"></a>原创地址 <a href="https://13811914041.github.io/daixuenan.github.io/">https://13811914041.github.io/daixuenan.github.io/</a></h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;原创地址-https-13811914041-github-io-daixuenan-github-io&quot;&gt;&lt;a href=&quot;#原创地址-https-13811914041-github-io-daixuenan-github-io&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="Android开发" scheme="https://13811914041.github.io/daixuenan.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
</feed>
